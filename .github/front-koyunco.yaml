name: Deploy Koyunco Frontend.

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    #paths:
    #  - 'src/api-auth/**'  # Monitorea cualquier cambio en la carpeta "services"
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/front-koyunco/**'  # Monitorea cualquier cambio en la carpeta "services"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '23' # Usa la versi√≥n de Node.js compatible con tu proyecto

        - name: Install dependencies
          run: npm install

        - name: Build React app
          run: npm run build


        - name: About Deploy
          run: |
            echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
            echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
            echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
            echo "üí° The ${{ github.repository }} repository has been cloned to the runner. üñ•Ô∏è The workflow is now ready to test your code on the runner."
            ls ${{ github.workspace }}

        - name: Log in to Azure Container Registry
          uses: azure/login@v2
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Deploy Service in Azure
          env:
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          run: |
            echo "----Building and deploying API Auth Microservice----"
            cd src/api-auth
            echo "Current directory: $(pwd)"
            echo "Listing files:"
            FILE_LIST=$(ls -lrta)
            echo "$FILE_LIST"

            echo "----Registery container TAG----"
            TAG="v$(date '+%Y%m%d%H%M%S')"
            IMAGE="acrkoyunprd.azurecr.io/api-auth:${TAG}"
            echo "$IMAGE"

            echo "----Building image $IMAGE----"
            az acr build --registry acrkoyunprd --image ${IMAGE} .

            echo "----Getting AKS credentials----"
            az aks get-credentials --resource-group rg-koyun-prd --name aks-koyun-prd

            echo "----Update the image in the deployment in memory and apply it----"
            sed -e 's|{IMAGE}|'"${IMAGE}"'|g' -e 's|{DATABASE_URL}|'"${DATABASE_URL}"'|g' -e 's|{SECRET_KEY}|'"${SECRET_KEY}"'|g' ./deployment.yaml | kubectl apply -f -

        - name: Get Pod Logs
          run: |
            echo "----Fetching logs for API Auth pods----"
            PODS=$(kubectl get pods -l app=api-auth -o jsonpath='{.items[*].metadata.name}')
            for pod in $PODS; do
              echo "Logs for pod $pod:"
              kubectl logs $pod
            done



     #  - name: Cleanup old images
     #    run: |
     #      REGISTRY="acrkoyunprd"
     #      REPOSITORY="wingman-api-user"
     #      RESOURCE_GROUP="rg-koyun-prd"
     #      AKS_CLUSTER="aks-koyun-prd"

     #      echo $REGISTRY $REPOSITORY $RESOURCE_GROUP $AKS_CLUSTER

     #      # Configuraci√≥n b√°sica
     #      IMAGES_TO_KEEP=2
     #      echo "Deleting old images, keeping only the two most recent ones"

     #      # Obtener la lista de im√°genes ordenadas por fecha de creaci√≥n
     #      IMAGES=$(az acr manifest list-metadata \
     #        --name $REGISTRY \
     #        --repository $REPOSITORY \
     #        --orderby time_desc \
     #        --query "[].digest" \
     #        -o tsv)

     #      # Obtener las im√°genes a eliminar (todas excepto las m√°s recientes)
     #      IMAGES_TO_DELETE=$(echo "$IMAGES" | tail -n +$(($IMAGES_TO_KEEP + 1)))

     #      # Eliminar las im√°genes antiguas
     #      if [ -n "$IMAGES_TO_DELETE" ]; then
     #        echo "$IMAGES_TO_DELETE" | while read -r DIGEST; do
     #          echo "Deleting image with digest: $DIGEST"
     #          az acr manifest delete --name $REGISTRY --repository $REPOSITORY --digest $DIGEST --yes
     #        done
     #      else
     #        echo "No images to delete. Keeping the most recent $IMAGES_TO_KEEP images."
     #      fi




    #    run: |
    #      echo "Building and deploying ${{ matrix.service }}"
    #      ls -lrta
    #      pwd
    #      cd services/${{ matrix.service }}
    #      ls -lrta
    #      pwd
    #      docker build -t 192.168.1.100:32000/${{ matrix.service }}:latest .
    #      docker push 192.168.1.100:32000/${{ matrix.service }}:latest
    #      cd terraform/
    #      terraform init
    #      terraform apply -auto-approve
